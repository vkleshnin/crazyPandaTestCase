//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""GunsActions"",
            ""id"": ""cc4c14fb-34a3-45c3-a509-e4d68200337e"",
            ""actions"": [
                {
                    ""name"": ""LeftFire"",
                    ""type"": ""Button"",
                    ""id"": ""65fe846e-c9c6-41a2-bb32-886f86938120"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightFire"",
                    ""type"": ""Button"",
                    ""id"": ""66aaed8a-88ca-4822-abb2-43bf0e9c0603"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""17ec13cf-a57b-4b4d-a8e7-6ff79d4b8a4d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f0750205-d4b5-4488-8f10-7ecc87034d49"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightFire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GunsActions
        m_GunsActions = asset.FindActionMap("GunsActions", throwIfNotFound: true);
        m_GunsActions_LeftFire = m_GunsActions.FindAction("LeftFire", throwIfNotFound: true);
        m_GunsActions_RightFire = m_GunsActions.FindAction("RightFire", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GunsActions
    private readonly InputActionMap m_GunsActions;
    private List<IGunsActionsActions> m_GunsActionsActionsCallbackInterfaces = new List<IGunsActionsActions>();
    private readonly InputAction m_GunsActions_LeftFire;
    private readonly InputAction m_GunsActions_RightFire;
    public struct GunsActionsActions
    {
        private @InputActions m_Wrapper;
        public GunsActionsActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftFire => m_Wrapper.m_GunsActions_LeftFire;
        public InputAction @RightFire => m_Wrapper.m_GunsActions_RightFire;
        public InputActionMap Get() { return m_Wrapper.m_GunsActions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GunsActionsActions set) { return set.Get(); }
        public void AddCallbacks(IGunsActionsActions instance)
        {
            if (instance == null || m_Wrapper.m_GunsActionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GunsActionsActionsCallbackInterfaces.Add(instance);
            @LeftFire.started += instance.OnLeftFire;
            @LeftFire.performed += instance.OnLeftFire;
            @LeftFire.canceled += instance.OnLeftFire;
            @RightFire.started += instance.OnRightFire;
            @RightFire.performed += instance.OnRightFire;
            @RightFire.canceled += instance.OnRightFire;
        }

        private void UnregisterCallbacks(IGunsActionsActions instance)
        {
            @LeftFire.started -= instance.OnLeftFire;
            @LeftFire.performed -= instance.OnLeftFire;
            @LeftFire.canceled -= instance.OnLeftFire;
            @RightFire.started -= instance.OnRightFire;
            @RightFire.performed -= instance.OnRightFire;
            @RightFire.canceled -= instance.OnRightFire;
        }

        public void RemoveCallbacks(IGunsActionsActions instance)
        {
            if (m_Wrapper.m_GunsActionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGunsActionsActions instance)
        {
            foreach (var item in m_Wrapper.m_GunsActionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GunsActionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GunsActionsActions @GunsActions => new GunsActionsActions(this);
    public interface IGunsActionsActions
    {
        void OnLeftFire(InputAction.CallbackContext context);
        void OnRightFire(InputAction.CallbackContext context);
    }
}
